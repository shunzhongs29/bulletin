# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: python:3.13-bookworm

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 1 seconds."
    - env
    - sleep 1
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 1 seconds."
    - sleep 1
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."

pages:
  stage: deploy
  before_script:
    - echo "setup python"
    - |
      curl -qs http://deb.debian.org --max-time 1 -o /dev/null || {
        [ -f /etc/apt/sources.list.d/debian.sources ] && sed -i 's#deb.debian.org#mirrors.aliyun.com#g' /etc/apt/sources.list.d/debian.sources
      }
      command -v ping || {
        /etc/apt/sources.list.d/debian.sources && cat /etc/apt/sources.list.d/debian.sources
        [ -f /etc/os-release ] && cat /etc/os-release
        apt update
        apt-get install -y iputils-ping wget curl ca-certificates
      }
      env
      ping -c1 -W5 www.google.com.hk || {
        pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple/
      }
      pip3 install -r requirements.txt --trusted-host de.vicp.net
      
  script:
  - |
    chmod +x tools/doc.sh
    tools/doc.sh
    mkdocs build --clean --site-dir public
    mkdocs --version
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH